package org.danilopianini.gradle.git.hooks

import org.gradle.api.initialization.Settings
import java.io.File
import java.io.Serializable

open class GitHooksExtension(val settings: Settings) : Serializable {

    private var hooks: Map<String, String> = emptyMap()

    var path: File? = null
        get() =
            field ?: requireNotNull(generateSequence(settings.settingsDir) { it.parentFile }.find { it.isGitRoot() }) {
                "No git root could be found in ${settings.settingsDir.absolutePath} or any of its parent directories"
            }

    private inline fun <H : ScriptContext> hook(context: H, configuration: H.() -> Unit) {
        require(!hooks.containsKey(context.name)) {
            "it looks like the hook ${context.name} is being defined twice"
        }
        hooks = hooks + (context.name to context.apply(configuration).script)
    }

    fun hook(hookName: String, configuration: ScriptContext.() -> Unit) =
        hook(CommonScriptContext(hookName), configuration)

    fun preCommit(configuration: ScriptContext.() -> Unit) = hook("pre-commit", configuration)

    fun commitMsg(configuration: CommitMsgScriptContext.() -> Unit): Unit =
        hook(CommitMsgScriptContext(), configuration)

    fun createHooks(overwriteExisting: Boolean = false) {
        val root = requireNotNull(path?.takeIf { it.isGitRoot() }) {
            "${path?.absolutePath} is not a valid git root"
        }
        hooks.forEach { (name, script) ->
            val hook = File(root.absolutePath, "/.git/hooks/$name")
            if (!hook.exists()) {
                require(hook.createNewFile()) { "Cannot create file ${hook.absolutePath}" }
                hook.writeText(script)
            } else {
                val oldScript = hook.readText()
                if (oldScript != script) {
                    settings.gradle.rootProject.logger.warn(
                        """
                        |The hook $name exists, but its content differs from the one generated by the git-hooks plugin.
                        |
                        |Original content:
                        |${oldScript.withMargins()}
                        |
                        |New content:
                        |${script.withMargins()}
                        """.trimMargin()
                    )
                    if (overwriteExisting) {
                        settings.gradle.rootProject.logger.warn("Overwriting git hook $name")
                        hook.writeText(script)
                    }
                }
            }
        }
    }

    companion object {
        private const val serialVersionUID = 1L
        const val name: String = "gitHooks"

        private fun String.withMargins() = lines().joinToString(separator = "\n|", prefix = "|")

        private fun File.isGitRoot(): Boolean = listFiles()
            ?.any { folder ->
                folder.isDirectory &&
                    folder.name == ".git" &&
                    folder.listFiles()?.any { it.isDirectory && it.name == "hooks" } ?: false
            }
            ?: false
    }
}